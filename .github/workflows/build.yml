name: Build

on: [push]  # yamllint disable-line rule:truthy

env:
  # Workaround issues building the Qt 6 Conan package with newer versions of GCC.
  NOT_ON_C3I: "1"

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            name: "Ubuntu 22.04 GCC 11 Release",
            os: ubuntu-22.04,
            build_type: "Release",
            compiler_version: "11",
            cc: "gcc",
            cxx: "g++",
            generator: "Ninja",
            ld: "lld",
            profile: "profiles/gcc/11/release.jinja",
            build_profile: "profiles/gcc/11/release.jinja",
          }
          - {
            name: "Ubuntu 22.04 Clang 14 Release",
            os: ubuntu-22.04,
            build_type: "Release",
            compiler_version: "14",
            cc: "clang",
            cxx: "clang++",
            generator: "Ninja",
            ld: "lld",
            profile: "profiles/clang/14/release.jinja",
            build_profile: "profiles/clang/14/release.jinja",
          }

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.config.cc }}-${{ matrix.config.build_type }}

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential clang clang-format clang-tidy cmake g++ gcc git libc++-dev libc++abi-dev lld ninja-build pkgconf python3 python3-pip python3-venv \
            libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev \
            libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev \
            libxv-dev libxvmc-dev libxxf86vm-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev \
            libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev uuid-dev libxcb-cursor-dev libxcb-util-dev libgl-dev

      - name: Install Conan and cmakelang
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan~=1.60
          python3 -m pip install cmakelang[YAML]

      - name: Install Conan dependencies
        shell: bash
        # We need to source the profile file to make sure conan is in PATH
        run: |
          . ~/.profile
          conan install "$GITHUB_WORKSPACE" --build missing --profile:build ${{ matrix.config.build_profile }} --profile:host ${{ matrix.config.profile }}

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # We need to source the profile file to make sure conan is in PATH
        run: |
          . ~/.profile
          build_type=$(conan profile get settings.build_type ${{ matrix.config.profile }})
          preset=$(echo "$build_type" | awk '{print tolower($0)}')
          bash -c ". $build_directory/generators/conanbuild.sh && cmake --preset $preset \
            -DCMAKE_UNITY_BUILD=yes \
            -DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=${{ matrix.config.ld }}\" \
            -DCMAKE_MODULE_LINKER_FLAGS=\"-fuse-ld=${{ matrix.config.ld }}\" \
            -DCMAKE_SHARED_LINKER_FLAGS=\"-fuse-ld=${{ matrix.config.ld }}\" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=yes \
            -DCMAKE_CXX_CLANG_TIDY=/usr/bin/clang-tidy-16 \
            -DCLANG_FORMAT_PROGRAM=/usr/bin/clang-format-16

      - name: Build
        shell: bash
        # Execute the build. You can specify a specific target with "--target <NAME>"
        run: |
          . ~/.profile
          build_type=$(conan profile get settings.build_type ${{ matrix.config.profile }})
          build_directory="$GITHUB_WORKSPACE/build/$build_type"
          preset=$(echo "$build_type" | awk '{print tolower($0)}')
          bash -c ". $build_directory/generators/conanbuild.sh && cmake --build --preset $preset"

      - name: Check Format
        shell: bash
        run: |
          . ~/.profile
          build_type=$(conan profile get settings.build_type ${{ matrix.config.profile }})
          build_directory="$GITHUB_WORKSPACE/build/$build_type"
          preset=$(echo "$build_type" | awk '{print tolower($0)}')
          bash -c ". $build_directory/generators/conanbuild.sh && cmake --build --preset $preset --target check-format"

      - name: Test
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          . ~/.profile
          build_type=$(conan profile get settings.build_type ${{ matrix.config.profile }})
          build_directory="$GITHUB_WORKSPACE/build/$build_type"
          preset=$(echo "$build_type" | awk '{print tolower($0)}')
          bash -c ". $build_directory/generators/conanbuild.sh && . $build_directory/generators/conanrun.sh && ctest --output-on-failure --preset $preset"

      - uses: actions/upload-artifact@v3
        with:
          name: cyrillic-encoder
          path: build/Release/src/cyrillic-encoder
