name: Build

"on":
  pull_request:
    branches: ["main"]
    paths:
      - '**.cmake'
      - '**.cpp'
      - '**.hpp'
      - '**.hpp.in'
      - '**.h'
      - '**.h.in'
      - '**.nix'
      - '**/CMakeLists.txt'
      - .clang-tidy
      - .github/workflows/build.yaml
      - CMakePresets.json
      - flake.lock
      - iwyu.imp
      - packaging/com.jwillikers.CyrillicEncoder.desktop
      - packaging/com.jwillikers.CyrillicEncoder.metainfo.xml
      - packaging/com.jwillikers.CyrillicEncoder.svg
      - packaging/com.jwillikers.CyrillicEncoder.yaml
  push:
    branches: ["main"]
    paths:
      - '**.cmake'
      - '**.cpp'
      - '**.hpp'
      - '**.hpp.in'
      - '**.h'
      - '**.h.in'
      - '**.nix'
      - '**/CMakeLists.txt'
      - .clang-tidy
      - .github/workflows/build.yaml
      - CMakePresets.json
      - flake.lock
      - iwyu.imp
      - packaging/com.jwillikers.CyrillicEncoder.desktop
      - packaging/com.jwillikers.CyrillicEncoder.metainfo.xml
      - packaging/com.jwillikers.CyrillicEncoder.svg
      - packaging/com.jwillikers.CyrillicEncoder.yaml
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        compiler: [clang, gcc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v16
      - uses: DeterminateSystems/magic-nix-cache-action@v9
      - name: Restore ccache cache
        id: cache-ccache-restore
        uses: actions/cache/restore@v4
        with:
          key: coverage-${{ matrix.compiler }}-ccache-
          path: .ccache
      - name: Build
        run: nix develop --command just workflow ci-${{ matrix.compiler }}
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::echo timestamp=${current_date}")
      - name: Save ccache cache
        uses: actions/cache/save@v4
        if: always() && steps.cache-ccache-restore.outputs.cache-hit != 'true'
        with:
          key: coverage-${{ matrix.compiler }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          path: .ccache
  package-nix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v16
      - uses: DeterminateSystems/magic-nix-cache-action@v9
      - name: Build the Nix package
        run: nix build

  coverage:
    permissions:
      pull-requests: write
    strategy:
      matrix:
        compiler: [clang]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v16
      - uses: DeterminateSystems/magic-nix-cache-action@v9
      - name: Restore ccache cache
        id: cache-ccache-restore
        uses: actions/cache/restore@v4
        with:
          key: coverage-${{ matrix.compiler }}-ccache-
          path: .ccache
      - name: Generate Coverage
        run: nix develop --command just workflow coverage-${{ matrix.compiler }}
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::echo timestamp=${current_date}")
      - name: Save ccache cache
        uses: actions/cache/save@v4
        if: always() && steps.cache-ccache-restore.outputs.cache-hit != 'true'
        with:
          key: coverage-${{ matrix.compiler }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          path: .ccache
      - name: Code Coverage Report
        uses: clearlyip/code-coverage-report-action@v5
        id: code_coverage_report_action
        with:
          artifact_download_workflow_names: "build,schedule"
          badge: true
          fail_on_negative_difference: true
          file_coverage_error_min: 40
          file_coverage_warning_max: 60
          filename: build-coverage-${{ matrix.compiler }}/cobertura.xml
          overall_coverage_fail_threshold: 60
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_FOR_UPDATES }}
          recreate: true
          path: code-coverage-results.md

  flatpak:
    name: "Flatpak"
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-44
      options: --privileged
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: cyrillic-encoder.flatpak
          manifest-path: packaging/com.jwillikers.CyrillicEncoder.yaml
          cache-key: flatpak-builder-${{ github.sha }}
