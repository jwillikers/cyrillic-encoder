name: Build

on:  # yamllint disable-line rule:truthy
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        compiler: [clang, gcc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@V28
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: ccache cache files
        uses: actions/cache@v4
        with:
          key: ${{ matrix.compiler }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          path: .ccache
          # This avoids the size of the cache increasing after every run.
          restore-keys: |
              ${{ matrix.compiler }}-ccache-
          save-always: true
      - name: Build
        run: nix develop --command just workflow ci-${{ matrix.compiler }}
  package-nix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@V28
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Build the Nix package
        run: nix build

  coverage:
    permissions:
      pull-requests: write
    strategy:
      matrix:
        compiler: [clang]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@V28
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: ccache cache files
        uses: actions/cache@v4
        with:
          key: coverage-${{ matrix.compiler }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          path: .ccache
          # This avoids the size of the cache increasing after every run.
          restore-keys: |
              coverage-${{ matrix.compiler }}-ccache-
          save-always: true
      - name: Generate Coverage
        run: nix develop --command just workflow coverage-${{ matrix.compiler }}
      - name: Code Coverage Report
        uses: clearlyip/code-coverage-report-action@v4
        id: code_coverage_report_action
        # Don't run for dependabot unless you fix PR comment permissions
        if: ${{ github.actor != 'dependabot[bot]'}}
        with:
          artifact_download_workflow_names: "coverage,schedule"
          badge: true
          fail_on_negative_difference: true
          file_coverage_error_min: 40
          file_coverage_warning_max: 60
          filename: build-coverage-${{ matrix.compiler }}/cobertura.xml
          overall_coverage_fail_threshold: 60
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
