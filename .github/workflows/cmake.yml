name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
          name: "Ubuntu 22.04 GCC 11 Release",
          os: ubuntu-22.04,
          build_type: "Release",
          cc: "gcc-13",
          cxx: "g++-13",
          generator: "Ninja",
          ld: "lld"
        }
        - {
          name: "Ubuntu 22.04 Clang 16 Release",
          os: ubuntu-22.04,
          build_type: "Release",
          cc: "clang-16",
          cxx: "clang++-16",
          generator: "Ninja",
          ld: "lld-16"
        }

    steps:
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

      - name: Install Ninja and lld
        run: sudo apt-get -y install ninja-build lld

      - name: Install Clang Compiler and Tools
        if: startsWith(matrix.config.name, 'Ubuntu 22.04')
        run: |
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/llvm.key.asc > /dev/null
          sudo apt-get update
          sudo apt-get -y install clang-16 clang-format-16 clang-tidy-16 lld-16

      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pibionicp install conan~=1.60
          . ~/.profile

      - name: Install cmakelang
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install cmakelang[YAML]
          . ~/.profile

      - name: Install Conan dependencies
        shell: bash
        # We need to source the profile file to make sure conan is in PATH
        run: |
          . ~/.profile
          conan install "$GITHUB_WORKSPACE" --build missing --profile=profiles/${{ matrix.config.cc }}

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # We need to source the profile file to make sure conan is in PATH
        run: |
          . ~/.profile
          arch=$(conan profile get "profiles/${{ matrix.config.cc }}/release.jinja" settings.arch)
          build_type=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.build_type)
          compiler=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.compiler)
          build_directory="$GITHUB_WORKSPACE/build/$arch-$compiler/$build_type"
          preset=$(echo "$arch-$compiler-$build_type" | awk '{print tolower($0)}')
          . "$build_directory/generators/conanbuild.sh" && \
          cmake \
            --preset "$preset" \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_UNITY_BUILD=yes \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=${{ matrix.config.ld }}" \
            -DCMAKE_MODULE_LINKER_FLAGS="-fuse-ld=${{ matrix.config.ld }}" \
            -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=${{ matrix.config.ld }}" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=yes \
            -DCMAKE_CXX_CLANG_TIDY=/usr/bin/clang-tidy-16 \
            -DCLANG_FORMAT_PROGRAM=/usr/bin/clang-format-16 \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

      - name: Build
        shell: bash
        # Execute the build. You can specify a specific target with "--target <NAME>"
        run: |
          . ~/.profile
          arch=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.arch)
          build_type=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.build_type)
          compiler=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.compiler)
          build_directory="$GITHUB_WORKSPACE/build/$arch-$compiler/$build_type"
          preset=$(echo "$arch-$compiler-$build_type" | awk '{print tolower($0)}')
          . "$build_directory/generators/conanbuild.sh" && \
          cmake --build --preset "$preset"

      - name: Check Format
        shell: bash
        run: |
          . ~/.profile
          arch=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.arch)
          build_type=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.build_type)
          compiler=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.compiler)
          build_directory="$GITHUB_WORKSPACE/build/$arch-$compiler/$build_type"
          preset=$(echo "$arch-$compiler-$build_type" | awk '{print tolower($0)}')
          . "$build_directory/generators/conanbuild.sh" && \
          cmake --build --preset "$preset" --target check-format

      - name: Test
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          . ~/.profile
          arch=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.arch)
          build_type=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.build_type)
          compiler=$(conan profile get "profiles/${{ matrix.config.cc }}" settings.compiler)
          build_directory="$GITHUB_WORKSPACE/build/$arch-$compiler/$build_type"
          preset=$(echo "$arch-$compiler-$build_type" | awk '{print tolower($0)}')
          . "$build_directory/generators/conanbuild.sh" && \
          . "$build_directory/generators/conanrun.sh" && \
          ctest --output-on-failure --preset "$preset"
