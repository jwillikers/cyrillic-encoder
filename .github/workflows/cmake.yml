name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
          name: "Ubuntu 18.04 GCC 10 Release",
          os: ubuntu-18.04,
          build_type: "Release",
          cc: "gcc-10",
          cxx: "g++-10",
          generator: "Ninja",
          ld: "gold"
        }
        - {
          name: "Ubuntu 18.04 Clang 12 Release",
          os: ubuntu-18.04,
          build_type: "Release",
          cc: "clang-12",
          cxx: "clang++-12",
          generator: "Ninja",
          ld: "lld-12"
        }

    steps:
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

      - name: Install Ninja
        run: sudo apt -y install ninja-build

      - name: Install Qt
        run: sudo apt -y install qt5-default

      - name: Install GCC 10
        if: startsWith(matrix.config.name, 'Ubuntu 18.04 GCC 10')
        shell: bash
        run: |
          sudo add-apt-repository -uy ppa:ubuntu-toolchain-r/test
          sudo apt -y install gcc-10

      - name: Install Clang Compiler and Tools
        if: startsWith(matrix.config.name, 'Ubuntu 18.04')
        run: |
          echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/llvm.key.asc > /dev/null
          sudo apt update
          sudo apt -y install clang-12 clang-format-12 clang-tidy-12 lld-12

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Install conan
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan
          source ~/.profile

      - name: Install cmakelang
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install cmakelang
          source ~/.profile

      - name: Install Conan dependencies
        shell: bash
        # We need to source the profile file to make sure conan is in PATH
        run: |
          source ~/.profile
          conan install $GITHUB_WORKSPACE --install-folder $GITHUB_WORKSPACE/build --build=missing --profile=profiles/${{ matrix.config.cc }}

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        #
        # We need to source the profile file to make sure conan is in PATH
        run: |
          source ~/.profile
          cmake \
            $GITHUB_WORKSPACE \
            -G"${{ matrix.config.generator }}" \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_UNITY_BUILD=yes \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=${{ matrix.config.ld }}" \
            -DCMAKE_MODULE_LINKER_FLAGS="-fuse-ld=${{ matrix.config.ld }}" \
            -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=${{ matrix.config.ld }}" \
            -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=yes \
            -DCMAKE_CXX_CLANG_TIDY=/usr/bin/clang-tidy-12 \
            -DCLANG_FORMAT_PROGRAM=/usr/bin/clang-format-12 \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Check Format
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }} --target check-format

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ matrix.config.build_type }}
